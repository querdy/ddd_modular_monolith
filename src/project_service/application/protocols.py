from typing import Self, Protocol
from uuid import UUID

from sqlalchemy.ext.asyncio import AsyncSession

from src.project_service.domain.aggregates.project import Project
from src.project_service.domain.entities.stage import Stage
from src.project_service.domain.entities.subproject import Subproject
from src.project_service.infrastructure.read_models.stage import StageRead


class IProjectRepository(Protocol):
    async def count(self) -> int: ...
    async def add(self, project: Project) -> None: ...
    async def get(self, project_id: UUID) -> Project: ...
    async def get_many(self, limit: int, offset: int) -> list[Project]: ...
    async def update(self, project: Project) -> Project: ...
    async def get_by_subproject(self, subproject_id: UUID) -> Project: ...
    async def get_by_stage(self, stage_id: UUID) -> Project: ...
    async def delete(self, project_id: UUID) -> None: ...


class IProjectReadRepository:
    async def subprojects_count(self, **filters) -> int: ...
    async def get_subprojects(self, limit: int, offset: int, **filters) -> list[Subproject]: ...

    async def stages_count(self, **filters) -> int: ...
    async def get_stages(self, limit: int, offset: int, **filters) -> list[Stage]: ...

    async def get_stage(self, stage_id: UUID) -> Stage: ...


class IProjectServiceUoW(Protocol):
    """Интерфейс для UoW"""

    session: AsyncSession
    projects: IProjectRepository
    projects_read: IProjectReadRepository

    async def __aenter__(self) -> Self: ...
    async def __aexit__(self, exc_type, exc_val, exc_tb): ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
